const hre = require("hardhat");
const ethers = hre.ethers;
const fs = require("fs");

/***
 * Deploy Base Contracts
 */

async function main() {
  const start = process.hrtime();

  [creator] = await ethers.getSigners();
  const etherBefore = await creator.getBalance();

  const DEFAULT_RATE = 1e6;
  const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";
  const USDC_ADDRESS = "{{USDC_ADDRESS}}";

  const Params = {
    FeeRate: "{{Params.FeeRate}}",
    RequestDuration: "{{Params.RequestDuration}}",
    WithdrawableDuration: "{{Params.WithdrawableDuration}}",
    MaxList: "{{Params.MaxList}}",

    UnlockGracePeriod: "{{Params.UnlockGracePeriod}}",
    MaxInsureSpan: "{{Params.MaxInsureSpan}}",
    MinInsureSpan: "{{Params.MinInsureSpan}}",

    UpperSlack: "{{Params.UpperSlack}}",
    LowerSlack: "{{Params.LowerSlack}}",
  };

  const PMV3 = {
    DefaultRate: "{{PMV3.DefaultRate}}",
    DefaultRateSlope1: "{{PMV3.DefaultRateSlope1}}",
    DefaultRateSlope2: "{{PMV3.DefaultRateSlope2}}",
    OptimalUtilizeRatio: "{{PMV3.OptimalUtilizeRatio}}",
  };

  const LaunchMarkets = [
    {{#LaunchPools.markets}}
    {name:"{{name}}", address: "{{address}}", premium: "{{premium}}"},
    {{/LaunchPools.markets}}
  ];

  const LaunchIndices = [
    {{#LaunchPools.indices}}
    {name:"{{name}}", poolListIndex: [ {{#markets}} {{.}}, {{/markets}} ], leverage:"{{leverage}}"},
    {{/LaunchPools.indices}}
  ];

  const USDC = await ethers.getContractFactory("ERC20Mock");
  const Ownership = await ethers.getContractFactory("Ownership");
  const MarketTemplate = await ethers.getContractFactory("MarketTemplate");
  const IndexTemplate = await ethers.getContractFactory("IndexTemplate");
  const ReserveTemplate = await ethers.getContractFactory("ReserveTemplate");
  const Factory = await ethers.getContractFactory("Factory");
  const Vault = await ethers.getContractFactory("Vault");
  const Registry = await ethers.getContractFactory("Registry");
  const PremiumModelV3 = await ethers.getContractFactory("PremiumModelV3");
  const Parameters = await ethers.getContractFactory("Parameters");

  let usdc;
  if(USDC_ADDRESS == ZERO_ADDRESS){
    usdc = await USDC.deploy(creator.address);
    await usdc.deployed();
    console.log("\x1b[32m usdc deployed to:", usdc.address);
  }else{
    usdc = await USDC.attach(USDC_ADDRESS);
    console.log("usdc attached to:", usdc.address);
  }


  //----- DEPLOY -----//
  const ownership = await Ownership.deploy();
  await ownership.deployed();
  console.log("\x1b[32m ownership deployed to:", ownership.address);

  const registry = await Registry.deploy(ownership.address);
  await registry.deployed();
  console.log(" registry deployed to:", registry.address);

  const factory = await Factory.deploy(registry.address, ownership.address);
  await factory.deployed();
  console.log(" factory deployed to:", factory.address);

  const parameters = await Parameters.deploy(ownership.address);
  await parameters.deployed();
  console.log(" parameters deployed to:", parameters.address);

  const vault = await Vault.deploy(usdc.address, registry.address, ZERO_ADDRESS, ownership.address);
  await vault.deployed();
  console.log(" vault deployed to:", vault.address);

  //premiumV3
  const premium = await PremiumModelV3.deploy(
    ownership.address,
    PMV3.DefaultRate,
    PMV3.DefaultRateSlope1,
    PMV3.DefaultRateSlope2,
    PMV3.OptimalUtilizeRatio
  );
  await premium.deployed();

  console.log(" PremiumModel deployed to:", premium.address);

  //----- SETUP -----//
  let tx = await registry.setFactory(factory.address);
  await tx.wait();

  //MarketTemplates
  const marketTemplate = await MarketTemplate.deploy();
  await marketTemplate.deployed();
  console.log(" marketTemplate deployed to:", marketTemplate.address);

  tx = await factory.approveTemplate(marketTemplate.address, true, true, false); //approval, isOpen, allowDuplicate
  await tx.wait();

  tx = await factory.approveReference(marketTemplate.address, 0, ZERO_ADDRESS, true);
  await tx.wait();

  tx = await factory.approveReference(marketTemplate.address, 1, usdc.address, true);
  await tx.wait();

  tx = await factory.approveReference(marketTemplate.address, 2, registry.address, true);
  await tx.wait();

  tx = await factory.approveReference(marketTemplate.address, 3, parameters.address, true);
  await tx.wait();

  //IndexTemplate
  const indexTemplate = await IndexTemplate.deploy();
  await indexTemplate.deployed();
  console.log(" indexTemplate deployed to:", indexTemplate.address);

  tx = await factory.approveTemplate(indexTemplate.address, true, false, true); //approval, isOpen, allowDuplicate
  await tx.wait();

  tx = await factory.approveReference(indexTemplate.address, 0, usdc.address, true);
  await tx.wait();

  tx = await factory.approveReference(indexTemplate.address, 1, registry.address, true);
  await tx.wait();

  tx = await factory.approveReference(indexTemplate.address, 2, parameters.address, true);
  await tx.wait();

  //ReserveTemplate
  const reserveTemplate = await ReserveTemplate.deploy();
  await reserveTemplate.deployed();

  console.log(" reserveTemplate deployed to:", reserveTemplate.address," \x1b[37m");

  tx = await factory.approveTemplate(reserveTemplate.address, true, false, true); //approval, isOpen, allowDuplicate
  await tx.wait();

  tx = await factory.approveReference(reserveTemplate.address, 0, usdc.address, true);
  await tx.wait();

  tx = await factory.approveReference(reserveTemplate.address, 1, registry.address, true);
  await tx.wait();

  tx = await factory.approveReference(reserveTemplate.address, 2, parameters.address, true);
  await tx.wait();

  //Set Parameters
  console.log("Parameters Setting");

  tx = await parameters.setVault(usdc.address, vault.address);
  await tx.wait();

  tx = await parameters.setFeeRate(ZERO_ADDRESS, Params.FeeRate);
  await tx.wait();

  tx = await parameters.setRequestDuration(ZERO_ADDRESS, Params.RequestDuration);
  await tx.wait();

  tx = await parameters.setWithdrawableDuration(ZERO_ADDRESS, Params.WithdrawableDuration);
  await tx.wait();

  tx = await parameters.setMaxList(ZERO_ADDRESS, Params.MaxList);
  await tx.wait();

  tx = await parameters.setPremiumModel(ZERO_ADDRESS, premium.address);
  await tx.wait();

  tx = await parameters.setUnlockGracePeriod(ZERO_ADDRESS, Params.UnlockGracePeriod);
  await tx.wait();

  tx = await parameters.setMaxInsureSpan(ZERO_ADDRESS, Params.MaxInsureSpan);
  await tx.wait();

  tx = await parameters.setMinInsureSpan(ZERO_ADDRESS, Params.MinInsureSpan);
  await tx.wait();

  tx = await parameters.setUpperSlack(ZERO_ADDRESS, Params.UpperSlack);
  await tx.wait();

  tx = await parameters.setLowerSlack(ZERO_ADDRESS, Params.LowerSlack);
  await tx.wait();


  //Deploy Markets and Indicies if applicable
  let markets = [];

  for (const info of LaunchMarkets) {
      console.log(`Deploying market for ${info.name}: ${info.address.slice(0,5)}..${info.address.slice(-3)}`);

      const createPool = await factory.createPool(
        marketTemplate.address,
        info.name,
        [0, 0],
        [info.address, usdc.address, registry.address, parameters.address]
      );
      const receipt = await createPool.wait();

      const marketCreatedEvent = receipt.events[2];
      const marketAddress = marketCreatedEvent.args[0];

      markets.push(marketAddress);
      console.log(`\x1b[32m New market at ${marketAddress} \x1b[37m`);

      if(info.premium != ""){
        tx = await premium.setRate(marketAddress, [info.premium, 0, 0, 0]);
        await tx.wait();
      }
  }

  for (const info of LaunchIndices){
      console.log(`Deploying index ${info.name}`);
      const createIndex = await factory.createPool(
        indexTemplate.address,
        info.name,
        [0],
        [usdc.address, registry.address, parameters.address]
      );
      const receipt = await createIndex.wait();
      const marketCreated = receipt.events.find((event) => "event" in event && event.event === "PoolCreated");
      const indexAddress = marketCreated.args[0];

      console.log(`\x1b[32m New index at ${indexAddress} \x1b[37m`);

      const index = await IndexTemplate.attach(indexAddress);

      tx= await index.setLeverage(info.leverage);
      await tx.wait();

      for(let i = 0; i<info.poolListIndex.length; i++){
        const poolIndex = info.poolListIndex[i];
        const market = markets[poolIndex];
        console.log(`Set${i} market${poolIndex}: ${market.slice(0,5)}..${market.slice(-3)}`);

        tx = await index["set(uint256,address,uint256)"](
          i,
          market,
          DEFAULT_RATE
        )
        await tx.wait();
      }
  }

  {{#verify}}
  //Verification
  {
    try{
      await hre.run("verify:verify", {
        address: ownership.address,
        constructorArguments: [],
      });
    }catch{
      console.log("verify for ownership skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: registry.address,
        constructorArguments: [ownership.address],
      });
    }catch{
      console.log("verify for registry skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: factory.address,
        constructorArguments: [registry.address, ownership.address],
      });
    }catch{
      console.log("verify for factory skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: parameters.address,
        constructorArguments: [ownership.address],
      });
    }catch{
      console.log("verify for parameters skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: vault.address,
        constructorArguments: [usdc.address, registry.address, ZERO_ADDRESS, ownership.address],
      });
    }catch{
      console.log("verify for vault skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: premium.address,
        constructorArguments: [
          ownership.address,
          PMV3.DefaultRate,
          PMV3.DefaultRateSlope1,
          PMV3.DefaultRateSlope2,
          PMV3.OptimalUtilizeRatio,
        ],
      });
    }catch{
      console.log("verify for premium skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: marketTemplate.address,
        constructorArguments: [],
      });
    }catch{
      console.log("verify for marketTemplate skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: indexTemplate.address,
        constructorArguments: [],
      });
    }catch{
      console.log("verify for indexTemplate skipped");
    }

    try{
      await hre.run("verify:verify", {
        address: reserveTemplate.address,
        constructorArguments: [],
      });
    }catch{
      console.log("verify for reserveTemplate skipped");
    }
  }
  {{/verify}}

  const end = process.hrtime(start);
  console.log("✨ finished (%ds %dms)", end[0], end[1] / 100000);

  const etherAfter = await creator.getBalance();
  console.log(`Used gas: ${etherBefore.sub(etherAfter)}`)
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
